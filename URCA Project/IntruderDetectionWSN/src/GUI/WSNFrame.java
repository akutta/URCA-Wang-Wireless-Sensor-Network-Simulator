/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WSNFrame2.java
 *
 * Created on May 27, 2011, 3:56:43 PM
 */

package GUI;

import EnumDefinitionPackage.*;
import IntruderDetectionWSN.Threads.GUIBasedIntruderDetectionThread;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JOptionPane;

/**
 *
 * @author KuttaA
 */
public class WSNFrame extends javax.swing.JFrame
        implements KeyListener
{
    private Integer boardWidth;
    private Integer boardHeight;

    private long lastError;
    /** Creates new form WSNFrame2 */
    public WSNFrame() {

        initComponents();

        lastError = -1;

        jSensingRange.setValue(500);
        jCommunicationRange.setValue(1000);

        jTextSensingRange.setText("50.0");
        jTextCommunicationRange.setText("100.0");

        jTextSensingRange.addKeyListener(this);
        jTextCommunicationRange.addKeyListener(this);

        jTextNumIterations.setText("50");
        
        jKValue.setEnabled(false);

        boardWidth = Integer.parseInt(jBoardWidth.getText());
        boardHeight = Integer.parseInt(jTextBoardHeight.getText());
    }

    public void disableSlider() {
       jKValue.setEnabled(false);
    }

    public void enableSlider() {
        jKValue.setEnabled(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void updateCommunicationWithRespectToRatio() {

        if ( jLockRanges.isSelected() ) {
            try {
            Double scaler = Double.parseDouble(jScaler.getText());
            Double newValue = jSensingRange.getValue()*scaler/10;
            jTextCommunicationRange.setText(Double.toString(newValue));

            Double scaledValue = newValue*10;
            jCommunicationRange.setValue(scaledValue.intValue());
            } catch (NumberFormatException err ) {
                if ( jScaler.getText().charAt(0) != '.' ) {
                    if ( lastError == -1 || System.currentTimeMillis() - lastError > 50 ) {
                        JOptionPane.showMessageDialog(null,"Must enter a valid double scaler!");
                        lastError = System.currentTimeMillis();
                    }
                }
            }
        }
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator6 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jTextKValue = new javax.swing.JTextField();
        jKValue = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSensingRange = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        jCommunicationRange = new javax.swing.JSlider();
        jDetectionMethod = new javax.swing.JComboBox();
        jTextSensingRange = new javax.swing.JTextField();
        jTextCommunicationRange = new javax.swing.JTextField();
        jAnimateSingleRun = new javax.swing.JButton();
        jComputeAvgDistance = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jTextNumIterations = new javax.swing.JTextField();
        jNumIterations = new javax.swing.JSlider();
        jLabel9 = new javax.swing.JLabel();
        jDistributionType = new javax.swing.JComboBox();
        jSeparator7 = new javax.swing.JSeparator();
        jSeparator8 = new javax.swing.JSeparator();
        jLockRanges = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        jScaler = new javax.swing.JTextField();
        jSeparator9 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jBoardWidth = new javax.swing.JTextField();
        jTextBoardHeight = new javax.swing.JTextField();
        jTextNumNodes = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jNumNodes = new javax.swing.JSlider();
        jBaseDX = new javax.swing.JSlider();
        jTextBaseDX = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jCheckRandomizedPositions = new javax.swing.JCheckBox();
        jTextInitPosY = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jTextFinalPosY = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jCheckLockFinalPosition = new javax.swing.JCheckBox();
        jTextFinalPosX = new javax.swing.JTextField();
        jTextInitPosX = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 24));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Straight Line Intruder Detection");

        jTextKValue.setEditable(false);
        jTextKValue.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextKValue.setText("3");

        jKValue.setMajorTickSpacing(2);
        jKValue.setMaximum(10);
        jKValue.setPaintTicks(true);
        jKValue.setValue(3);
        jKValue.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jKValueStateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel1.setText("Select the K Value");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel2.setText("Communication Range (m)");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel3.setText("Sensing Range (m)");

        jSensingRange.setMajorTickSpacing(1000);
        jSensingRange.setMaximum(5000);
        jSensingRange.setPaintTicks(true);
        jSensingRange.setValue(500);
        jSensingRange.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSensingRangeStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel5.setText("Detection Method");

        jCommunicationRange.setMajorTickSpacing(1000);
        jCommunicationRange.setMaximum(5000);
        jCommunicationRange.setPaintTicks(true);
        jCommunicationRange.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCommunicationRangeStateChanged(evt);
            }
        });

        jDetectionMethod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Single Detection", "K - Detections", "K - Coverage" }));
        jDetectionMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDetectionMethodActionPerformed(evt);
            }
        });

        jTextSensingRange.setEditable(false);
        jTextSensingRange.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextSensingRange.setText("Sensing Range");
        jTextSensingRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextSensingRangeActionPerformed(evt);
            }
        });

        jTextCommunicationRange.setEditable(false);
        jTextCommunicationRange.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextCommunicationRange.setText("jTextField1");
        jTextCommunicationRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextCommunicationRangeActionPerformed(evt);
            }
        });

        jAnimateSingleRun.setText("Animate Single Run");
        jAnimateSingleRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAnimateSingleRunActionPerformed(evt);
            }
        });

        jComputeAvgDistance.setText("Compute Intruder Distance");
        jComputeAvgDistance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComputeAvgDistanceActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel8.setText("Number of Iterations");

        jTextNumIterations.setEditable(false);
        jTextNumIterations.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextNumIterations.setText("jTextField1");

        jNumIterations.setMajorTickSpacing(50);
        jNumIterations.setMaximum(1000);
        jNumIterations.setMinimum(1);
        jNumIterations.setPaintTicks(true);
        jNumIterations.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jNumIterationsStateChanged(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel9.setText("Distribution Type");

        jDistributionType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Random", "Triangle", "Square" }));

        jLockRanges.setText("Linked Ranges");
        jLockRanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLockRangesActionPerformed(evt);
            }
        });

        jLabel10.setText("Ratio:");

        jScaler.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jScaler.setText("2.0");
        jScaler.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jScalerKeyReleased(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel11.setText("Board Dimensions");

        jLabel12.setText("Maximum Width ( m )");

        jLabel13.setText("Maximum Height ( m )");

        jBoardWidth.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jBoardWidth.setText("1000");
        jBoardWidth.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jBoardWidthFocusLost(evt);
            }
        });

        jTextBoardHeight.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextBoardHeight.setText("1000");
        jTextBoardHeight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextBoardHeightFocusLost(evt);
            }
        });

        jTextNumNodes.setEditable(false);
        jTextNumNodes.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextNumNodes.setText("400");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel14.setText("Desired Number of Nodes");

        jNumNodes.setMajorTickSpacing(100);
        jNumNodes.setMaximum(5000);
        jNumNodes.setPaintTicks(true);
        jNumNodes.setSnapToTicks(true);
        jNumNodes.setValue(400);
        jNumNodes.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jNumNodesStateChanged(evt);
            }
        });

        jBaseDX.setMajorTickSpacing(100);
        jBaseDX.setMaximum(1000);
        jBaseDX.setPaintTicks(true);
        jBaseDX.setSnapToTicks(true);
        jBaseDX.setValue(1000);
        jBaseDX.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jBaseDXStateChanged(evt);
            }
        });

        jTextBaseDX.setEditable(false);
        jTextBaseDX.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextBaseDX.setText("1000");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel15.setText("Base Station Location");

        jCheckRandomizedPositions.setSelected(true);
        jCheckRandomizedPositions.setText("Randomize Initial Intruder Position");
        jCheckRandomizedPositions.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckRandomizedPositionsStateChanged(evt);
            }
        });

        jTextInitPosY.setEditable(false);
        jTextInitPosY.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextInitPosY.setText("0");
        jTextInitPosY.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextInitPosYFocusLost(evt);
            }
        });

        jLabel16.setText("Initial Position:");

        jTextFinalPosY.setEditable(false);
        jTextFinalPosY.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFinalPosY.setText("0");
        jTextFinalPosY.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFinalPosYFocusLost(evt);
            }
        });

        jLabel17.setText("Final Position");

        jCheckLockFinalPosition.setText("Lock Final Intruder Position");
        jCheckLockFinalPosition.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckLockFinalPositionStateChanged(evt);
            }
        });

        jTextFinalPosX.setEditable(false);
        jTextFinalPosX.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFinalPosX.setText("1000");
        jTextFinalPosX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFinalPosXActionPerformed(evt);
            }
        });
        jTextFinalPosX.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFinalPosXFocusLost(evt);
            }
        });

        jTextInitPosX.setEditable(false);
        jTextInitPosX.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextInitPosX.setText("-1");
        jTextInitPosX.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextInitPosXFocusLost(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(209, 209, 209))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator9, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jDistributionType, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jDetectionMethod, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jTextKValue, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jKValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 147, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel12)
                                            .addComponent(jLabel13))
                                        .addGap(31, 31, 31)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextBoardHeight)
                                            .addComponent(jBoardWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextBaseDX, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jBaseDX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel15))
                                .addGap(57, 57, 57))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGap(10, 10, 10)
                                            .addComponent(jTextSensingRange, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jSensingRange, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGap(10, 10, 10)
                                            .addComponent(jTextCommunicationRange, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jCommunicationRange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextNumNodes, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jNumNodes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLockRanges, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(37, 37, 37)
                                        .addComponent(jLabel10)
                                        .addGap(18, 18, 18)
                                        .addComponent(jScaler, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(57, 57, 57))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckRandomizedPositions)
                                    .addComponent(jCheckLockFinalPosition))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextInitPosX, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jTextFinalPosX, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextFinalPosY, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextInitPosY, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(77, 77, 77)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextNumIterations, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jNumIterations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(48, 48, 48))
                            .addComponent(jSeparator8, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jAnimateSingleRun, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 248, Short.MAX_VALUE)
                        .addComponent(jComputeAvgDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(91, 91, 91))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDistributionType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDetectionMethod, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextKValue, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                            .addComponent(jKValue, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(7, 7, 7))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel11)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(26, 26, 26)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel13)
                                        .addComponent(jTextBoardHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(jBoardWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(90, 90, 90)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jBaseDX, 0, 0, Short.MAX_VALUE)
                                .addComponent(jTextBaseDX, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(13, 13, 13)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSensingRange, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jTextSensingRange, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCommunicationRange, javax.swing.GroupLayout.PREFERRED_SIZE, 24, Short.MAX_VALUE)
                            .addComponent(jTextCommunicationRange, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLockRanges, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jScaler, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jNumNodes, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jTextNumNodes, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jCheckRandomizedPositions, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel16))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCheckLockFinalPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17))))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextInitPosY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextInitPosX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextFinalPosY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextFinalPosX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jNumIterations, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jTextNumIterations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jAnimateSingleRun, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComputeAvgDistance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jKValueStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jKValueStateChanged
        // TODO add your handling code here:
        jTextKValue.setText(Integer.toString(jKValue.getValue()));
    }//GEN-LAST:event_jKValueStateChanged

    private void jSensingRangeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSensingRangeStateChanged
        // TODO add your handling code here:
        jTextSensingRange.setText(Double.toString(jSensingRange.getValue()/10.0));
        updateCommunicationWithRespectToRatio();
}//GEN-LAST:event_jSensingRangeStateChanged

    private void jCommunicationRangeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCommunicationRangeStateChanged
        // TODO add your handling code here:\

        jTextCommunicationRange.setText(Double.toString(jCommunicationRange.getValue()/10));
        if ( jLockRanges.isSelected() ) {
            try {
                Double scaler = Double.parseDouble(jScaler.getText());
                Double newValue = Math.floor(jCommunicationRange.getValue()/scaler/10);
                jTextSensingRange.setText(Double.toString(newValue));

                Double scaledValue = newValue*10;
                jSensingRange.setValue(scaledValue.intValue());
            } catch (NumberFormatException err ) {
                if ( jScaler.getText().charAt(0) != '.' ) {
                    if ( lastError == -1 || System.currentTimeMillis() - lastError > 50 ) {
                        JOptionPane.showMessageDialog(null,"Must enter a valid double scaler!");
                        lastError = System.currentTimeMillis();
                    }
                }
            }
        }
}//GEN-LAST:event_jCommunicationRangeStateChanged

    private void jDetectionMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDetectionMethodActionPerformed
        if ( jDetectionMethod.toString().contains("K"))
            enableSlider();
        else
            disableSlider();
}//GEN-LAST:event_jDetectionMethodActionPerformed

private void jAnimateSingleRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAnimateSingleRunActionPerformed
    // TODO add your handling code here:
    SensingTypeEnum sType;

    switch (jDetectionMethod.getSelectedIndex()) {
        case 0:
            sType = SensingTypeEnum.SINGLE_DETECTION;
            break;
        case 1:
            sType = SensingTypeEnum.K_INDIVIDUAL;
            break;
        case 2:
            sType = SensingTypeEnum.K_SIMULTANEOUS;
            break;
        default:
            sType = SensingTypeEnum.SINGLE_DETECTION;
    }

    DistributionTypeEnum dType;

    switch( jDistributionType.getSelectedIndex() ) {
        case 0:
            dType = DistributionTypeEnum.RANDOM;
            break;
        case 1:
            dType = DistributionTypeEnum.TRIANGLE;
            break;
        case 2:
            dType = DistributionTypeEnum.SQUARE;
            break;
        default:
            dType = DistributionTypeEnum.RANDOM;
    }

    Integer sRange = jSensingRange.getValue();
    Integer cRange = jCommunicationRange.getValue();
    //Integer boardWidth = Integer.parseInt(jBoardWidth.getText());
    //Integer boardHeight = Integer.parseInt(jTextBoardHeight.getText());
    Integer numNodes = Integer.parseInt(jTextNumNodes.getText());
    Integer basePosX = jBaseDX.getValue();

    Integer initPosX = -1;
    Integer initPosY = -1;
    Integer finalPosX = -1;
    Integer finalPosY = -1;

    if ( !jCheckRandomizedPositions.isSelected() ) {
        initPosX = Integer.parseInt(jTextInitPosX.getText());
        initPosY = Integer.parseInt(jTextInitPosY.getText());
    }

    if ( jCheckLockFinalPosition.isSelected() ) {
        finalPosX = Integer.parseInt(jTextFinalPosX.getText());
        finalPosY = Integer.parseInt(jTextFinalPosY.getText());
    }

    SingleRunSimulation frame = new SingleRunSimulation(
            sRange.floatValue() / 10,cRange.floatValue() / 10,
            dType,sType,
            IntruderTypeEnum.STRAIGHT_LINE,
            EnergyComputationEnum.DIJKSTRA,
            jKValue.getValue(),
            boardWidth, boardHeight,
            numNodes, basePosX,
            initPosX, initPosY,
            finalPosX, finalPosY
            );

    frame.pack();
    frame.setVisible(true);
    frame.start();
}//GEN-LAST:event_jAnimateSingleRunActionPerformed

private void jComputeAvgDistanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComputeAvgDistanceActionPerformed
    // TODO add your handling code here:

    SensingTypeEnum sType;

    switch (jDetectionMethod.getSelectedIndex()) {
        case 0:
            sType = SensingTypeEnum.SINGLE_DETECTION;
            break;
        case 1:
            sType = SensingTypeEnum.K_INDIVIDUAL;
            break;
        case 2:
            sType = SensingTypeEnum.K_SIMULTANEOUS;
            break;
        default:
            sType = SensingTypeEnum.SINGLE_DETECTION;
    }

    DistributionTypeEnum dType;

    switch( jDistributionType.getSelectedIndex() ) {
        case 0:
            dType = DistributionTypeEnum.RANDOM;
            break;
        case 1:
            dType = DistributionTypeEnum.TRIANGLE;
            break;
        case 2:
            dType = DistributionTypeEnum.SQUARE;
            break;
        default:
            dType = DistributionTypeEnum.RANDOM;
    }

    Integer sRange = jSensingRange.getValue();
    Integer cRange = jCommunicationRange.getValue();
    //Integer boardWidth = Integer.parseInt(jBoardWidth.getText());
    //Integer boardHeight = Integer.parseInt(jTextBoardHeight.getText());
    Integer numNodes = Integer.parseInt(jTextNumNodes.getText());
    
    if ( WSNDriver != null ) return; // Only keep track of 1 thread

    ProgressAndResults frame = new ProgressAndResults(jNumIterations.getValue());
    frame.setSize(356,321);
    frame.pack();

    WSNDriver = new GUIBasedIntruderDetectionThread();
    WSNDriver.initialize(sType,
            dType,
            IntruderTypeEnum.STRAIGHT_LINE, 
            sRange.floatValue() / 10,
            cRange.floatValue() / 10,
            jNumIterations.getValue(),
            jKValue.getValue(),
            boardWidth,
            boardHeight,
            numNodes,
            -1,-1,  // Init Position
            -1,-1,  // Final Position
            this,                    // parent so we can be notified when thread finishes
            frame
            );

    WSNDriver.start();
    DisableAllControls();
    frame.setTitle("Average Intruder Distance - ");
    frame.setVisible(true);
}//GEN-LAST:event_jComputeAvgDistanceActionPerformed

public void threadFinished() {
    Double avgDist = WSNDriver.getAverageDistance();
    WSNDriver = null;
    EnableAllControls();
}

private void jNumIterationsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jNumIterationsStateChanged
    // TODO add your handling code here:
    jTextNumIterations.setText(Integer.toString(jNumIterations.getValue()));
}//GEN-LAST:event_jNumIterationsStateChanged

private void jLockRangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLockRangesActionPerformed
    // TODO add your handling code here:
    updateCommunicationWithRespectToRatio();
}//GEN-LAST:event_jLockRangesActionPerformed

private void jTextCommunicationRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextCommunicationRangeActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_jTextCommunicationRangeActionPerformed

private void jTextSensingRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextSensingRangeActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_jTextSensingRangeActionPerformed

private void jNumNodesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jNumNodesStateChanged
    // TODO add your handling code here:
    jTextNumNodes.setText(String.valueOf(jNumNodes.getValue()));
}//GEN-LAST:event_jNumNodesStateChanged

private void jBaseDXStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jBaseDXStateChanged
    // TODO add your handling code here:
    jTextBaseDX.setText(String.valueOf(jBaseDX.getValue()));
}//GEN-LAST:event_jBaseDXStateChanged

private void jBoardWidthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jBoardWidthFocusLost
    // TODO add your handling code here:
    jBaseDX.setMaximum(Integer.parseInt(jBoardWidth.getText()));
    boardWidth = jBaseDX.getMaximum();
}//GEN-LAST:event_jBoardWidthFocusLost

private void jTextInitPosYFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextInitPosYFocusLost
    // TODO add your handling code here:
    if ( Integer.parseInt(jTextInitPosY.getText()) > Integer.parseInt(jTextBoardHeight.getText()))
        jTextInitPosY.setText(jTextBoardHeight.getText());
}//GEN-LAST:event_jTextInitPosYFocusLost

private void jCheckRandomizedPositionsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckRandomizedPositionsStateChanged
    // TODO add your handling code here:
    if ( jCheckRandomizedPositions.isSelected() ) {
        jTextInitPosY.setEditable(false);
        jTextInitPosX.setEditable(false);
    } else {
        jTextInitPosY.setEditable(true);
        jTextInitPosX.setEditable(true);
    }
}//GEN-LAST:event_jCheckRandomizedPositionsStateChanged

private void jCheckLockFinalPositionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckLockFinalPositionStateChanged
    // TODO add your handling code here:
    if ( !jCheckLockFinalPosition.isSelected() ) {
        jTextFinalPosX.setEditable(false);
        jTextFinalPosY.setEditable(false);
    } else {
        jTextFinalPosX.setEditable(true);
        jTextFinalPosY.setEditable(true);
    }
}//GEN-LAST:event_jCheckLockFinalPositionStateChanged

private void jTextFinalPosYFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFinalPosYFocusLost
    // TODO add your handling code here:
    if ( Integer.parseInt(jTextFinalPosY.getText()) > Integer.parseInt(jTextBoardHeight.getText()))
        jTextFinalPosY.setText(jTextBoardHeight.getText());
}//GEN-LAST:event_jTextFinalPosYFocusLost

private void jTextFinalPosXFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFinalPosXFocusLost
    // TODO add your handling code here:
}//GEN-LAST:event_jTextFinalPosXFocusLost

private void jTextInitPosXFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextInitPosXFocusLost
    // TODO add your handling code here:
}//GEN-LAST:event_jTextInitPosXFocusLost

private void jTextFinalPosXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFinalPosXActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_jTextFinalPosXActionPerformed

private void jTextBoardHeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextBoardHeightFocusLost
        // TODO add your handling code here:
        boardHeight = Integer.parseInt(jTextBoardHeight.getText());

        
}//GEN-LAST:event_jTextBoardHeightFocusLost

private void jScalerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jScalerKeyReleased
    // TODO add your handling code here:
    updateCommunicationWithRespectToRatio();
}//GEN-LAST:event_jScalerKeyReleased


private GUIBasedIntruderDetectionThread WSNDriver;



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAnimateSingleRun;
    private javax.swing.JSlider jBaseDX;
    private javax.swing.JTextField jBoardWidth;
    private javax.swing.JCheckBox jCheckLockFinalPosition;
    private javax.swing.JCheckBox jCheckRandomizedPositions;
    private javax.swing.JSlider jCommunicationRange;
    private javax.swing.JButton jComputeAvgDistance;
    private javax.swing.JComboBox jDetectionMethod;
    private javax.swing.JComboBox jDistributionType;
    private javax.swing.JSlider jKValue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JCheckBox jLockRanges;
    private javax.swing.JSlider jNumIterations;
    private javax.swing.JSlider jNumNodes;
    private javax.swing.JTextField jScaler;
    private javax.swing.JSlider jSensingRange;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JTextField jTextBaseDX;
    private javax.swing.JTextField jTextBoardHeight;
    private javax.swing.JTextField jTextCommunicationRange;
    private javax.swing.JTextField jTextFinalPosX;
    private javax.swing.JTextField jTextFinalPosY;
    private javax.swing.JTextField jTextInitPosX;
    private javax.swing.JTextField jTextInitPosY;
    private javax.swing.JTextField jTextKValue;
    private javax.swing.JTextField jTextNumIterations;
    private javax.swing.JTextField jTextNumNodes;
    private javax.swing.JTextField jTextSensingRange;
    // End of variables declaration//GEN-END:variables

    private void DisableAllControls() {
    jAnimateSingleRun.setEnabled(false);
    jCommunicationRange.setEnabled(false);
    jComputeAvgDistance.setEnabled(false);
    jDetectionMethod.setEnabled(false);
    jDistributionType.setEnabled(false);
    jKValue.setEnabled(false);
    jNumIterations.setEnabled(false);
    jSensingRange.setEnabled(false);
    }

    private void EnableAllControls() {
    jAnimateSingleRun.setEnabled(true);
    jCommunicationRange.setEnabled(true);
    jComputeAvgDistance.setEnabled(true);
    jDetectionMethod.setEnabled(true);
    jDistributionType.setEnabled(true);
    jKValue.setEnabled(true);
    jNumIterations.setEnabled(true);
    jSensingRange.setEnabled(true);
    }

    public void keyTyped(KeyEvent e) {
        //System.out.println("Typed");
    }

    public void keyPressed(KeyEvent e) {
        //System.out.println("Pressed");
    }

    public void keyReleased(KeyEvent e) {
        //System.out.println("Released");
    }
 }
